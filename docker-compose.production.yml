networks:
  quantum-network:
    driver: bridge
services:
  grafana:
    container_name: quantum-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: quantum123
    image: grafana/grafana:latest
    networks:
    - quantum-network
    ports:
    - 3000:3000
    restart: unless-stopped
    volumes:
    - grafana-data:/var/lib/grafana
    - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
  prometheus:
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --web.enable-lifecycle
    container_name: quantum-prometheus
    image: prom/prometheus:latest
    networks:
    - quantum-network
    ports:
    - 9090:9090
    restart: unless-stopped
    volumes:
    - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    - prometheus-data:/prometheus
  quantum-optimizer:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: quantum-optimizer
    environment:
      ENVIRONMENT: development
      MONITORING_ENABLED: 'true'
      QUANTUM_LOG_LEVEL: DEBUG
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - python
      - -c
      - from quantum_hyper_search import QuantumHyperSearch; print("OK")
      timeout: 10s
    image: quantum-hyper-search:1.0.0
    networks:
    - quantum-network
    ports:
    - 8000:8000
    restart: unless-stopped
    volumes:
    - ./data:/app/data
    - ./logs:/app/logs
    - ./cache:/app/cache
version: '3.8'
volumes:
  grafana-data: {}
  prometheus-data: {}
