# Production Kubernetes Deployment for Quantum Hyperparameter Search
apiVersion: v1
kind: Namespace
metadata:
  name: quantum-production
  labels:
    name: quantum-production
    environment: production
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-optimizer
  namespace: quantum-production
  labels:
    app: quantum-optimizer
    version: v1.0.0
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: quantum-optimizer
  template:
    metadata:
      labels:
        app: quantum-optimizer
        version: v1.0.0
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: quantum-optimizer
        image: quantum-hyper-search:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-url
        - name: QUANTUM_BACKEND
          value: "dwave"
        - name: DWAVE_TOKEN
          valueFrom:
            secretKeyRef:
              name: quantum-secrets
              key: dwave-token
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: quantum-cache
          mountPath: /app/cache
        - name: quantum-logs
          mountPath: /app/logs
        - name: quantum-config
          mountPath: /app/config
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      volumes:
      - name: quantum-cache
        persistentVolumeClaim:
          claimName: quantum-cache-pvc
      - name: quantum-logs
        persistentVolumeClaim:
          claimName: quantum-logs-pvc
      - name: quantum-config
        configMap:
          name: quantum-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - quantum-optimizer
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "quantum-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: quantum-optimizer-service
  namespace: quantum-production
  labels:
    app: quantum-optimizer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  selector:
    app: quantum-optimizer
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  type: LoadBalancer
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: quantum-optimizer-hpa
  namespace: quantum-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: quantum-optimizer
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: quantum-config
  namespace: quantum-production
data:
  app.yaml: |
    environment: production
    logging:
      level: INFO
      format: json
    quantum:
      backend: dwave
      default_reads: 1000
      timeout: 300
    security:
      encryption_enabled: true
      audit_logging: true
    monitoring:
      metrics_enabled: true
      health_check_interval: 30
    cache:
      enabled: true
      ttl: 3600
      max_size: 10000
    compliance:
      mode: standard
      data_retention_days: 2555
---
apiVersion: v1
kind: Secret
metadata:
  name: quantum-secrets
  namespace: quantum-production
type: Opaque
stringData:
  dwave-token: "your-dwave-token-here"
  encryption-key: "your-encryption-key-here"
  jwt-secret: "your-jwt-secret-here"
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: quantum-production
type: Opaque
stringData:
  postgres-url: "postgresql://quantum_user:quantum_password@postgres-service:5432/quantum_db"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quantum-cache-pvc
  namespace: quantum-production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: quantum-logs-pvc
  namespace: quantum-production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp3
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: quantum-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - yes
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: quantum-production
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: quantum-production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: gp3
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: quantum-production
type: Opaque
stringData:
  redis-password: "quantum-redis-secure-password"
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: quantum-production
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: quantum_db
        - name: POSTGRES_USER
          value: quantum_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - quantum_user
            - -d
            - quantum_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - quantum_user
            - -d
            - quantum_db
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
      storageClassName: gp3
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: quantum-production
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None  # Headless service for StatefulSet
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: quantum-production
type: Opaque
stringData:
  postgres-password: "quantum-postgres-secure-password"
---
# Ingress with TLS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quantum-ingress
  namespace: quantum-production
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - quantum-optimizer.your-domain.com
    secretName: quantum-tls-secret
  rules:
  - host: quantum-optimizer.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: quantum-optimizer-service
            port:
              number: 80
---
# Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: quantum-network-policy
  namespace: quantum-production
spec:
  podSelector:
    matchLabels:
      app: quantum-optimizer
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to: []  # Allow external quantum backend connections
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: quantum-optimizer-pdb
  namespace: quantum-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: quantum-optimizer
---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: quantum-optimizer-monitor
  namespace: quantum-production
spec:
  selector:
    matchLabels:
      app: quantum-optimizer
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
---
# Prometheus Rule for Alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: quantum-optimizer-alerts
  namespace: quantum-production
spec:
  groups:
  - name: quantum-optimizer
    rules:
    - alert: QuantumOptimizerDown
      expr: up{job="quantum-optimizer-service"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Quantum Optimizer is down"
        description: "Quantum Optimizer has been down for more than 1 minute."
    
    - alert: QuantumOptimizerHighMemory
      expr: container_memory_usage_bytes{pod=~"quantum-optimizer-.*"} / container_spec_memory_limit_bytes > 0.9
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "Quantum Optimizer high memory usage"
        description: "Quantum Optimizer memory usage is above 90% for more than 5 minutes."
    
    - alert: QuantumOptimizerHighCPU
      expr: rate(container_cpu_usage_seconds_total{pod=~"quantum-optimizer-.*"}[5m]) / container_spec_cpu_quota * container_spec_cpu_period > 0.8
      for: 10m
      labels:
        severity: warning
      annotations:
        summary: "Quantum Optimizer high CPU usage"
        description: "Quantum Optimizer CPU usage is above 80% for more than 10 minutes."
    
    - alert: QuantumOptimizerHighErrorRate
      expr: rate(http_requests_total{job="quantum-optimizer-service",status=~"5.."}[5m]) / rate(http_requests_total{job="quantum-optimizer-service"}[5m]) > 0.1
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "Quantum Optimizer high error rate"
        description: "Quantum Optimizer error rate is above 10% for more than 5 minutes."
