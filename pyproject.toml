```toml
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quantum-annealed-hyper-search"
version = "0.1.0"
description = "Hybrid quantum-classical library for hyperparameter optimization using D-Wave quantum annealers"
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragonlabs.com"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.8"
keywords = ["quantum", "machine-learning", "hyperparameter-optimization", "d-wave", "annealing", "optimization", "hyperparameter"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
]

dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "tqdm>=4.62.0",
    "pydantic>=1.8.0",
    "typing-extensions>=4.0.0",
    "dwave-ocean-sdk>=6.0.0",
    "dimod>=0.12.0",
    "networkx>=2.6",
    "joblib>=1.1.0",
]

[project.optional-dependencies]
dwave = [
    "dwave-system>=1.19.0",
    "dwave-hybrid>=0.6.0",
    "dwave-preprocessing>=0.6.0",
    "minorminer>=0.2.0",
]
simulators = [
    "dwave-neal>=0.6.0",
    "neal>=0.5.9",
    "tabu>=0.1.0",
    "qbsolv>=0.3.0",
]
optimizers = [
    "optuna>=3.0.0",
    "ray[tune]>=2.0.0",
    "hyperopt>=0.2.7",
    "bayesian-optimization>=1.4.0",
]
ml = [
    "torch>=1.12.0",
    "tensorflow>=2.9.0",
    "xgboost>=1.6.0",
    "lightgbm>=3.3.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "jupyter>=1.0.0",
]
all = [
    "quantum-annealed-hyper-search[dwave,simulators,optimizers,ml,dev]"
]

[project.urls]
Homepage = "https://github.com/danieleschmidt/quantum-annealed-hyper-search"
Documentation = "https://quantum-hyper-search.readthedocs.io"
Repository = "https://github.com/danieleschmidt/quantum-annealed-hyper-search"
Issues = "https://github.com/danieleschmidt/quantum-annealed-hyper-search/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["quantum_hyper_search*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude build artifacts
  build/
  | dist/
  | \.git/
  | \.venv/
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=quantum_hyper_search",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "quantum: marks tests that require quantum hardware",
]

[tool.coverage.run]
source = ["quantum_hyper_search"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
```
