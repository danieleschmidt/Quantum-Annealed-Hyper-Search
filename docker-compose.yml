version: '3.8'

services:
  quantum-hyper-search:
    build:
      context: .
      target: production
    container_name: quantum-hyper-search
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - CACHE_ENABLED=true
      - CACHE_SIZE=10000
      - PARALLEL_ENABLED=true
      - MONITORING_ENABLED=true
      - SECURITY_ENABLED=true
    volumes:
      - quantum_cache:/app/cache
      - quantum_logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "from quantum_hyper_search import QuantumHyperSearch; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - quantum_network

  quantum-hyper-search-dwave:
    build:
      context: .
      target: dwave
    container_name: quantum-hyper-search-dwave
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - QUANTUM_BACKEND=dwave
      - DWAVE_API_TOKEN=${DWAVE_API_TOKEN}
      - DWAVE_SOLVER=${DWAVE_SOLVER:-Advantage_system4.1}
      - CACHE_ENABLED=true
      - CACHE_SIZE=50000
    volumes:
      - quantum_cache_dwave:/app/cache
      - quantum_logs_dwave:/app/logs
    depends_on:
      - quantum-hyper-search
    networks:
      - quantum_network
    profiles:
      - dwave

  quantum-api:
    build:
      context: .
      target: api
    container_name: quantum-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - API_WORKERS=4
    volumes:
      - quantum_cache:/app/cache
      - quantum_logs:/app/logs
    depends_on:
      - quantum-hyper-search
    networks:
      - quantum_network
    profiles:
      - api

  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - quantum_network
    profiles:
      - cache

  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - quantum_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    networks:
      - quantum_network
    profiles:
      - monitoring

  jupyter:
    build:
      context: .
      target: development
    container_name: quantum-jupyter
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-quantum123}
    volumes:
      - ./examples:/app/examples
      - ./notebooks:/app/notebooks
      - quantum_cache:/app/cache
    networks:
      - quantum_network
    profiles:
      - development

volumes:
  quantum_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/cache
  quantum_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs
  quantum_cache_dwave:
    driver: local
  quantum_logs_dwave:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  quantum_network:
    driver: bridge